03/12 21:29:29 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 (main, Sep 11 2023, 13:44:35) [GCC 11.2.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 701009290
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.8
    NVCC: Cuda compilation tools, release 11.8, V11.8.89
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-10)
    PyTorch: 2.1.2
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.1.1 (Git Hash 64f6bcbcbab628e96f33a62c3e975f8535a7bde4)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.7
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-invalid-partial-specialization -Wno-unused-private-field -Wno-aligned-allocation-unavailable -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=ON, TORCH_VERSION=2.1.2, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.16.2
    OpenCV: 4.9.0
    MMEngine: 0.10.3

Runtime environment:
    cudnn_benchmark: False
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 701009290
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

03/12 21:29:29 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backend_args = None
data_root = 'data/coco/'
dataset_type = 'CocoDataset'
default_hooks = dict(
    checkpoint=dict(interval=1, type='CheckpointHook'),
    logger=dict(interval=50, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='DetVisualizationHook'))
default_scope = 'mmdet'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_scales = [
    (
        1333,
        800,
    ),
    (
        666,
        400,
    ),
    (
        2000,
        1200,
    ),
]
launcher = 'none'
load_from = 'checkpoints/retinanet_x101_64x4d_fpn_1x_coco_20200130-366f5af1.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=50)
model = dict(
    backbone=dict(
        base_width=4,
        depth=101,
        frozen_stages=1,
        groups=64,
        init_cfg=dict(
            checkpoint='open-mmlab://resnext101_64x4d', type='Pretrained'),
        norm_cfg=dict(requires_grad=True, type='BN'),
        norm_eval=True,
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        style='pytorch',
        type='ResNeXt'),
    bbox_head=dict(
        anchor_generator=dict(
            octave_base_scale=4,
            ratios=[
                0.5,
                1.0,
                2.0,
            ],
            scales_per_octave=3,
            strides=[
                8,
                16,
                32,
                64,
                128,
            ],
            type='AnchorGenerator'),
        bbox_coder=dict(
            target_means=[
                0.0,
                0.0,
                0.0,
                0.0,
            ],
            target_stds=[
                1.0,
                1.0,
                1.0,
                1.0,
            ],
            type='DeltaXYWHBBoxCoder'),
        feat_channels=256,
        in_channels=256,
        loss_bbox=dict(loss_weight=1.0, type='L1Loss'),
        loss_cls=dict(
            alpha=0.25,
            gamma=2.0,
            loss_weight=1.0,
            type='FocalLoss',
            use_sigmoid=True),
        num_classes=80,
        stacked_convs=4,
        type='RetinaHead'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_size_divisor=32,
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='DetDataPreprocessor'),
    neck=dict(
        add_extra_convs='on_input',
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        num_outs=5,
        out_channels=256,
        start_level=1,
        type='FPN'),
    test_cfg=dict(
        max_per_img=100,
        min_bbox_size=0,
        nms=dict(iou_threshold=0.5, type='nms'),
        nms_pre=1000,
        score_thr=0.05),
    train_cfg=dict(
        allowed_border=-1,
        assigner=dict(
            ignore_iof_thr=-1,
            min_pos_iou=0,
            neg_iou_thr=0.4,
            pos_iou_thr=0.5,
            type='MaxIoUAssigner'),
        debug=False,
        pos_weight=-1,
        sampler=dict(type='PseudoSampler')),
    type='RetinaNet')
optim_wrapper = dict(
    optimizer=dict(lr=0.01, momentum=0.9, type='SGD', weight_decay=0.0001),
    type='OptimWrapper')
param_scheduler = [
    dict(
        begin=0, by_epoch=False, end=500, start_factor=0.001, type='LinearLR'),
    dict(
        begin=0,
        by_epoch=True,
        end=12,
        gamma=0.1,
        milestones=[
            8,
            11,
        ],
        type='MultiStepLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='annotations/instances_val2017.json',
        backend_args=None,
        data_prefix=dict(img='val2017/'),
        data_root='data/coco/',
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    ann_file='data/coco/annotations/instances_val2017.json',
    backend_args=None,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
test_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        1333,
        800,
    ), type='Resize'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
        ),
        type='PackDetInputs'),
]
train_cfg = dict(max_epochs=12, type='EpochBasedTrainLoop', val_interval=1)
train_dataloader = dict(
    batch_sampler=dict(type='AspectRatioBatchSampler'),
    batch_size=2,
    dataset=dict(
        ann_file='annotations/instances_train2017.json',
        backend_args=None,
        data_prefix=dict(img='train2017/'),
        data_root='data/coco/',
        filter_cfg=dict(filter_empty_gt=True, min_size=32),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PackDetInputs'),
        ],
        type='CocoDataset'),
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(keep_ratio=True, scale=(
        1333,
        800,
    ), type='Resize'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PackDetInputs'),
]
tta_model = dict(
    tta_cfg=dict(max_per_img=100, nms=dict(iou_threshold=0.5, type='nms')),
    type='DetTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale=(
                    1333,
                    800,
                ), type='Resize'),
                dict(keep_ratio=True, scale=(
                    666,
                    400,
                ), type='Resize'),
                dict(keep_ratio=True, scale=(
                    2000,
                    1200,
                ), type='Resize'),
            ],
            [
                dict(prob=1.0, type='RandomFlip'),
                dict(prob=0.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations', with_bbox=True),
            ],
            [
                dict(
                    meta_keys=(
                        'img_id',
                        'img_path',
                        'ori_shape',
                        'img_shape',
                        'scale_factor',
                        'flip',
                        'flip_direction',
                    ),
                    type='PackDetInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='annotations/instances_val2017.json',
        backend_args=None,
        data_prefix=dict(img='val2017/'),
        data_root='data/coco/',
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    ann_file='data/coco/annotations/instances_val2017.json',
    backend_args=None,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='DetLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = './work_dirs/retinanet_x101-64x4d_fpn_1x_coco'

03/12 21:29:45 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
03/12 21:29:45 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
loading annotations into memory...
Done (t=0.61s)
creating index...
index created!
loading annotations into memory...
Done (t=0.47s)
creating index...
index created!
Loads checkpoint by local backend from path: checkpoints/retinanet_x101_64x4d_fpn_1x_coco_20200130-366f5af1.pth
03/12 21:29:48 - mmengine - INFO - Load checkpoint from checkpoints/retinanet_x101_64x4d_fpn_1x_coco_20200130-366f5af1.pth
03/12 21:30:17 - mmengine - INFO - Epoch(test) [  50/5000]    eta: 0:49:26  time: 0.5993  data_time: 0.0389  memory: 721  
03/12 21:30:22 - mmengine - INFO - Epoch(test) [ 100/5000]    eta: 0:28:30  time: 0.0990  data_time: 0.0015  memory: 712  
03/12 21:30:27 - mmengine - INFO - Epoch(test) [ 150/5000]    eta: 0:21:29  time: 0.0992  data_time: 0.0016  memory: 721  
03/12 21:30:32 - mmengine - INFO - Epoch(test) [ 200/5000]    eta: 0:17:52  time: 0.0961  data_time: 0.0015  memory: 712  
03/12 21:30:37 - mmengine - INFO - Epoch(test) [ 250/5000]    eta: 0:15:42  time: 0.0989  data_time: 0.0015  memory: 715  
03/12 21:30:42 - mmengine - INFO - Epoch(test) [ 300/5000]    eta: 0:14:12  time: 0.0959  data_time: 0.0015  memory: 715  
03/12 21:30:47 - mmengine - INFO - Epoch(test) [ 350/5000]    eta: 0:13:09  time: 0.1003  data_time: 0.0015  memory: 710  
03/12 21:30:52 - mmengine - INFO - Epoch(test) [ 400/5000]    eta: 0:12:18  time: 0.0960  data_time: 0.0015  memory: 712  
03/12 21:30:57 - mmengine - INFO - Epoch(test) [ 450/5000]    eta: 0:11:38  time: 0.0978  data_time: 0.0015  memory: 710  
03/12 21:31:02 - mmengine - INFO - Epoch(test) [ 500/5000]    eta: 0:11:05  time: 0.0977  data_time: 0.0015  memory: 715  
03/12 21:31:06 - mmengine - INFO - Epoch(test) [ 550/5000]    eta: 0:10:38  time: 0.0975  data_time: 0.0016  memory: 712  
03/12 21:31:11 - mmengine - INFO - Epoch(test) [ 600/5000]    eta: 0:10:14  time: 0.0974  data_time: 0.0016  memory: 715  
03/12 21:31:16 - mmengine - INFO - Epoch(test) [ 650/5000]    eta: 0:09:53  time: 0.0980  data_time: 0.0016  memory: 712  
03/12 21:31:21 - mmengine - INFO - Epoch(test) [ 700/5000]    eta: 0:09:34  time: 0.0991  data_time: 0.0016  memory: 721  
03/12 21:31:26 - mmengine - INFO - Epoch(test) [ 750/5000]    eta: 0:09:18  time: 0.0981  data_time: 0.0016  memory: 701  
03/12 21:31:31 - mmengine - INFO - Epoch(test) [ 800/5000]    eta: 0:09:02  time: 0.0962  data_time: 0.0015  memory: 721  
03/12 21:31:36 - mmengine - INFO - Epoch(test) [ 850/5000]    eta: 0:08:48  time: 0.0999  data_time: 0.0015  memory: 715  
03/12 21:31:41 - mmengine - INFO - Epoch(test) [ 900/5000]    eta: 0:08:35  time: 0.0969  data_time: 0.0015  memory: 712  
03/12 21:31:46 - mmengine - INFO - Epoch(test) [ 950/5000]    eta: 0:08:23  time: 0.0980  data_time: 0.0015  memory: 710  
03/12 21:31:50 - mmengine - INFO - Epoch(test) [1000/5000]    eta: 0:08:11  time: 0.0961  data_time: 0.0015  memory: 712  
03/12 21:31:55 - mmengine - INFO - Epoch(test) [1050/5000]    eta: 0:08:00  time: 0.0983  data_time: 0.0015  memory: 715  
03/12 21:32:00 - mmengine - INFO - Epoch(test) [1100/5000]    eta: 0:07:50  time: 0.0975  data_time: 0.0016  memory: 709  
03/12 21:32:05 - mmengine - INFO - Epoch(test) [1150/5000]    eta: 0:07:40  time: 0.0981  data_time: 0.0016  memory: 710  
03/12 21:32:10 - mmengine - INFO - Epoch(test) [1200/5000]    eta: 0:07:31  time: 0.0979  data_time: 0.0015  memory: 721  
03/12 21:32:15 - mmengine - INFO - Epoch(test) [1250/5000]    eta: 0:07:22  time: 0.0988  data_time: 0.0015  memory: 712  
03/12 21:32:20 - mmengine - INFO - Epoch(test) [1300/5000]    eta: 0:07:13  time: 0.0980  data_time: 0.0015  memory: 721  
03/12 21:32:25 - mmengine - INFO - Epoch(test) [1350/5000]    eta: 0:07:05  time: 0.0995  data_time: 0.0015  memory: 721  
03/12 21:32:30 - mmengine - INFO - Epoch(test) [1400/5000]    eta: 0:06:56  time: 0.0960  data_time: 0.0015  memory: 715  
03/12 21:32:34 - mmengine - INFO - Epoch(test) [1450/5000]    eta: 0:06:48  time: 0.0975  data_time: 0.0016  memory: 721  
03/12 21:32:39 - mmengine - INFO - Epoch(test) [1500/5000]    eta: 0:06:40  time: 0.0977  data_time: 0.0017  memory: 710  
03/12 21:32:44 - mmengine - INFO - Epoch(test) [1550/5000]    eta: 0:06:33  time: 0.0986  data_time: 0.0015  memory: 709  
03/12 21:32:49 - mmengine - INFO - Epoch(test) [1600/5000]    eta: 0:06:26  time: 0.0984  data_time: 0.0015  memory: 715  
03/12 21:32:54 - mmengine - INFO - Epoch(test) [1650/5000]    eta: 0:06:18  time: 0.0968  data_time: 0.0015  memory: 721  
03/12 21:32:59 - mmengine - INFO - Epoch(test) [1700/5000]    eta: 0:06:11  time: 0.0960  data_time: 0.0015  memory: 712  
03/12 21:33:04 - mmengine - INFO - Epoch(test) [1750/5000]    eta: 0:06:04  time: 0.0992  data_time: 0.0018  memory: 721  
03/12 21:33:09 - mmengine - INFO - Epoch(test) [1800/5000]    eta: 0:05:57  time: 0.0981  data_time: 0.0016  memory: 701  
03/12 21:33:14 - mmengine - INFO - Epoch(test) [1850/5000]    eta: 0:05:50  time: 0.0985  data_time: 0.0015  memory: 721  
03/12 21:33:19 - mmengine - INFO - Epoch(test) [1900/5000]    eta: 0:05:44  time: 0.0985  data_time: 0.0016  memory: 721  
03/12 21:33:23 - mmengine - INFO - Epoch(test) [1950/5000]    eta: 0:05:37  time: 0.0970  data_time: 0.0015  memory: 721  
03/12 21:33:28 - mmengine - INFO - Epoch(test) [2000/5000]    eta: 0:05:31  time: 0.1000  data_time: 0.0015  memory: 721  
03/12 21:33:33 - mmengine - INFO - Epoch(test) [2050/5000]    eta: 0:05:24  time: 0.0971  data_time: 0.0015  memory: 705  
03/12 21:33:38 - mmengine - INFO - Epoch(test) [2100/5000]    eta: 0:05:18  time: 0.0964  data_time: 0.0015  memory: 715  
03/12 21:33:43 - mmengine - INFO - Epoch(test) [2150/5000]    eta: 0:05:12  time: 0.0981  data_time: 0.0015  memory: 705  
03/12 21:33:48 - mmengine - INFO - Epoch(test) [2200/5000]    eta: 0:05:05  time: 0.0961  data_time: 0.0015  memory: 712  
03/12 21:33:53 - mmengine - INFO - Epoch(test) [2250/5000]    eta: 0:04:59  time: 0.0987  data_time: 0.0015  memory: 715  
03/12 21:33:58 - mmengine - INFO - Epoch(test) [2300/5000]    eta: 0:04:53  time: 0.0980  data_time: 0.0015  memory: 701  
03/12 21:34:03 - mmengine - INFO - Epoch(test) [2350/5000]    eta: 0:04:47  time: 0.0976  data_time: 0.0015  memory: 712  
03/12 21:34:07 - mmengine - INFO - Epoch(test) [2400/5000]    eta: 0:04:41  time: 0.0984  data_time: 0.0015  memory: 715  
03/12 21:34:12 - mmengine - INFO - Epoch(test) [2450/5000]    eta: 0:04:35  time: 0.0963  data_time: 0.0015  memory: 715  
03/12 21:34:17 - mmengine - INFO - Epoch(test) [2500/5000]    eta: 0:04:29  time: 0.0975  data_time: 0.0015  memory: 721  
03/12 21:34:22 - mmengine - INFO - Epoch(test) [2550/5000]    eta: 0:04:23  time: 0.0983  data_time: 0.0015  memory: 715  
03/12 21:34:27 - mmengine - INFO - Epoch(test) [2600/5000]    eta: 0:04:17  time: 0.0989  data_time: 0.0015  memory: 712  
03/12 21:34:32 - mmengine - INFO - Epoch(test) [2650/5000]    eta: 0:04:12  time: 0.0979  data_time: 0.0015  memory: 712  
03/12 21:34:37 - mmengine - INFO - Epoch(test) [2700/5000]    eta: 0:04:06  time: 0.0992  data_time: 0.0015  memory: 721  
03/12 21:34:42 - mmengine - INFO - Epoch(test) [2750/5000]    eta: 0:04:00  time: 0.0972  data_time: 0.0015  memory: 715  
03/12 21:34:47 - mmengine - INFO - Epoch(test) [2800/5000]    eta: 0:03:54  time: 0.0980  data_time: 0.0015  memory: 721  
03/12 21:34:52 - mmengine - INFO - Epoch(test) [2850/5000]    eta: 0:03:49  time: 0.0981  data_time: 0.0015  memory: 712  
03/12 21:34:57 - mmengine - INFO - Epoch(test) [2900/5000]    eta: 0:03:43  time: 0.0991  data_time: 0.0015  memory: 721  
03/12 21:35:01 - mmengine - INFO - Epoch(test) [2950/5000]    eta: 0:03:38  time: 0.0981  data_time: 0.0015  memory: 721  
03/12 21:35:06 - mmengine - INFO - Epoch(test) [3000/5000]    eta: 0:03:32  time: 0.0976  data_time: 0.0015  memory: 715  
03/12 21:35:11 - mmengine - INFO - Epoch(test) [3050/5000]    eta: 0:03:26  time: 0.0986  data_time: 0.0015  memory: 712  
03/12 21:35:16 - mmengine - INFO - Epoch(test) [3100/5000]    eta: 0:03:21  time: 0.0995  data_time: 0.0015  memory: 721  
03/12 21:35:21 - mmengine - INFO - Epoch(test) [3150/5000]    eta: 0:03:15  time: 0.0984  data_time: 0.0015  memory: 712  
03/12 21:35:26 - mmengine - INFO - Epoch(test) [3200/5000]    eta: 0:03:10  time: 0.0987  data_time: 0.0015  memory: 709  
03/12 21:35:31 - mmengine - INFO - Epoch(test) [3250/5000]    eta: 0:03:04  time: 0.0972  data_time: 0.0015  memory: 701  
03/12 21:35:36 - mmengine - INFO - Epoch(test) [3300/5000]    eta: 0:02:59  time: 0.0979  data_time: 0.0015  memory: 721  
03/12 21:35:41 - mmengine - INFO - Epoch(test) [3350/5000]    eta: 0:02:53  time: 0.0973  data_time: 0.0015  memory: 712  
03/12 21:35:46 - mmengine - INFO - Epoch(test) [3400/5000]    eta: 0:02:48  time: 0.0977  data_time: 0.0015  memory: 712  
03/12 21:35:51 - mmengine - INFO - Epoch(test) [3450/5000]    eta: 0:02:43  time: 0.0986  data_time: 0.0015  memory: 721  
03/12 21:35:55 - mmengine - INFO - Epoch(test) [3500/5000]    eta: 0:02:37  time: 0.0961  data_time: 0.0015  memory: 709  
03/12 21:36:00 - mmengine - INFO - Epoch(test) [3550/5000]    eta: 0:02:32  time: 0.0953  data_time: 0.0015  memory: 715  
03/12 21:36:05 - mmengine - INFO - Epoch(test) [3600/5000]    eta: 0:02:26  time: 0.0985  data_time: 0.0015  memory: 710  
03/12 21:36:10 - mmengine - INFO - Epoch(test) [3650/5000]    eta: 0:02:21  time: 0.0983  data_time: 0.0015  memory: 721  
03/12 21:36:15 - mmengine - INFO - Epoch(test) [3700/5000]    eta: 0:02:16  time: 0.0976  data_time: 0.0015  memory: 701  
03/12 21:36:20 - mmengine - INFO - Epoch(test) [3750/5000]    eta: 0:02:10  time: 0.0978  data_time: 0.0015  memory: 712  
03/12 21:36:25 - mmengine - INFO - Epoch(test) [3800/5000]    eta: 0:02:05  time: 0.0983  data_time: 0.0015  memory: 715  
03/12 21:36:30 - mmengine - INFO - Epoch(test) [3850/5000]    eta: 0:02:00  time: 0.0992  data_time: 0.0015  memory: 721  
03/12 21:36:35 - mmengine - INFO - Epoch(test) [3900/5000]    eta: 0:01:54  time: 0.0985  data_time: 0.0015  memory: 712  
03/12 21:36:39 - mmengine - INFO - Epoch(test) [3950/5000]    eta: 0:01:49  time: 0.0963  data_time: 0.0015  memory: 710  
03/12 21:36:44 - mmengine - INFO - Epoch(test) [4000/5000]    eta: 0:01:44  time: 0.0965  data_time: 0.0015  memory: 705  
03/12 21:36:49 - mmengine - INFO - Epoch(test) [4050/5000]    eta: 0:01:38  time: 0.0982  data_time: 0.0015  memory: 715  
03/12 21:36:54 - mmengine - INFO - Epoch(test) [4100/5000]    eta: 0:01:33  time: 0.0978  data_time: 0.0016  memory: 721  
03/12 21:36:59 - mmengine - INFO - Epoch(test) [4150/5000]    eta: 0:01:28  time: 0.0970  data_time: 0.0015  memory: 701  
03/12 21:37:04 - mmengine - INFO - Epoch(test) [4200/5000]    eta: 0:01:23  time: 0.0974  data_time: 0.0015  memory: 710  
03/12 21:37:09 - mmengine - INFO - Epoch(test) [4250/5000]    eta: 0:01:17  time: 0.0959  data_time: 0.0015  memory: 721  
03/12 21:37:13 - mmengine - INFO - Epoch(test) [4300/5000]    eta: 0:01:12  time: 0.0975  data_time: 0.0015  memory: 710  
03/12 21:37:18 - mmengine - INFO - Epoch(test) [4350/5000]    eta: 0:01:07  time: 0.0979  data_time: 0.0015  memory: 721  
03/12 21:37:23 - mmengine - INFO - Epoch(test) [4400/5000]    eta: 0:01:02  time: 0.0979  data_time: 0.0015  memory: 712  
03/12 21:37:28 - mmengine - INFO - Epoch(test) [4450/5000]    eta: 0:00:56  time: 0.0962  data_time: 0.0015  memory: 712  
03/12 21:37:33 - mmengine - INFO - Epoch(test) [4500/5000]    eta: 0:00:51  time: 0.0964  data_time: 0.0015  memory: 712  
03/12 21:37:38 - mmengine - INFO - Epoch(test) [4550/5000]    eta: 0:00:46  time: 0.0995  data_time: 0.0015  memory: 721  
03/12 21:37:43 - mmengine - INFO - Epoch(test) [4600/5000]    eta: 0:00:41  time: 0.0982  data_time: 0.0017  memory: 712  
03/12 21:37:48 - mmengine - INFO - Epoch(test) [4650/5000]    eta: 0:00:36  time: 0.0983  data_time: 0.0015  memory: 701  
03/12 21:37:53 - mmengine - INFO - Epoch(test) [4700/5000]    eta: 0:00:30  time: 0.0996  data_time: 0.0015  memory: 715  
03/12 21:37:57 - mmengine - INFO - Epoch(test) [4750/5000]    eta: 0:00:25  time: 0.0957  data_time: 0.0015  memory: 712  
03/12 21:38:02 - mmengine - INFO - Epoch(test) [4800/5000]    eta: 0:00:20  time: 0.0969  data_time: 0.0015  memory: 721  
03/12 21:38:07 - mmengine - INFO - Epoch(test) [4850/5000]    eta: 0:00:15  time: 0.0980  data_time: 0.0015  memory: 721  
03/12 21:38:12 - mmengine - INFO - Epoch(test) [4900/5000]    eta: 0:00:10  time: 0.0985  data_time: 0.0016  memory: 715  
03/12 21:38:17 - mmengine - INFO - Epoch(test) [4950/5000]    eta: 0:00:05  time: 0.0981  data_time: 0.0015  memory: 721  
03/12 21:38:22 - mmengine - INFO - Epoch(test) [5000/5000]    eta: 0:00:00  time: 0.0980  data_time: 0.0015  memory: 721  
03/12 21:38:27 - mmengine - INFO - Evaluating bbox...
Loading and preparing results...
DONE (t=1.12s)
creating index...
index created!
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=30.43s).
Accumulating evaluation results...
DONE (t=10.03s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.410
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.609
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.440
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.239
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.452
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.540
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.569
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.569
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.569
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.374
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.612
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.727
03/12 21:39:11 - mmengine - INFO - bbox_mAP_copypaste: 0.410 0.609 0.440 0.239 0.452 0.540
03/12 21:39:11 - mmengine - INFO - Epoch(test) [5000/5000]    coco/bbox_mAP: 0.4100  coco/bbox_mAP_50: 0.6090  coco/bbox_mAP_75: 0.4400  coco/bbox_mAP_s: 0.2390  coco/bbox_mAP_m: 0.4520  coco/bbox_mAP_l: 0.5400  data_time: 0.0019  time: 0.1028

============================= JOB FEEDBACK =============================

NodeName=uc2n513
Job ID: 23250834
Cluster: uc2
User/Group: ma_jjakubas/ma_ma
State: COMPLETED (exit code 0)
Nodes: 1
Cores per node: 16
CPU Utilized: 00:10:03
CPU Efficiency: 5.77% of 02:54:08 core-walltime
Job Wall-clock time: 00:10:53
Memory Utilized: 3.13 GB
Memory Efficiency: 6.27% of 50.00 GB
